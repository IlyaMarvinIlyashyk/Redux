{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst initialState = {\n  items: [],\n  totalQuantity: 0,\n  totalAmount: 0,\n  changed: false\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialState,\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      state.changed = true;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/ilya4/Desktop/Redux/project_2/src/store/cart-slice.js"],"names":["createSlice","uiActions","initialState","items","totalQuantity","totalAmount","changed","cartSlice","name","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","cartActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,aAAa,EAAE,CAA5B;AAA+BC,EAAAA,WAAW,EAAE,CAA5C;AAA+CC,EAAAA,OAAO,EAAE;AAAxD,CAArB;AAEA,MAAMC,SAAS,GAAGP,WAAW,CAAC;AAC1BQ,EAAAA,IAAI,EAAE,MADoB;AAE1BN,EAAAA,YAAY,EAAEA,YAFY;AAG1BO,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACP,aAAN,GAAsBQ,MAAM,CAACC,OAAP,CAAeT,aAArC;AACAO,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAAP,CAAeV,KAA7B;AACH,KAJK;;AAKNW,IAAAA,aAAa,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACR,KAAN,CAAYc,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA7C,CAArB;AACAR,MAAAA,KAAK,CAACP,aAAN;AACAO,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;;AACA,UAAI,CAACU,YAAL,EAAmB;AACfL,QAAAA,KAAK,CAACR,KAAN,CAAYiB,IAAZ,CAAiB;AACbD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADC;AAEbE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAFF;AAGbC,UAAAA,QAAQ,EAAE,CAHG;AAIbC,UAAAA,UAAU,EAAER,OAAO,CAACM,KAJP;AAKbb,UAAAA,IAAI,EAAEO,OAAO,CAACS;AALD,SAAjB;AAOH,OARD,MAQO;AACHR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACH;AACJ,KAtBK;;AAuBNI,IAAAA,kBAAkB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AAC9B,YAAMO,EAAE,GAAGP,MAAM,CAACC,OAAlB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACR,KAAN,CAAYc,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAR,MAAAA,KAAK,CAACP,aAAN;;AACA,UAAIY,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAC7BX,QAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYuB,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACH,OAFD,MAEO;AACHH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACH;AACJ;;AAjCK;AAHgB,CAAD,CAA7B;AAwCA,OAAO,MAAMM,WAAW,GAAGpB,SAAS,CAACqB,OAA9B;AAEP,eAAerB,SAAS,CAACsB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\nconst initialState = { items: [], totalQuantity: 0, totalAmount: 0, changed: false };\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: initialState,\r\n    reducers: {\r\n        replaceCart(state, action) {\r\n            state.totalQuantity = action.payload.totalQuantity;\r\n            state.items = action.payload.items;\r\n        },\r\n        addItemToCart(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find(item => item.id === newItem.id);\r\n            state.totalQuantity++;\r\n            state.changed = true;\r\n            if (!existingItem) {\r\n                state.items.push({\r\n                    id: newItem.id, \r\n                    price: newItem.price, \r\n                    quantity: 1, \r\n                    totalPrice: newItem.price,\r\n                    name: newItem.title\r\n                });\r\n            } else {\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\r\n            }\r\n        },\r\n        removeItemFromCart(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item => item.id === id);\r\n            state.totalQuantity--;\r\n            if (existingItem.quantity === 1) {\r\n                state.items = state.items.filter(item => item.id !== id);\r\n            } else {\r\n                existingItem.quantity--;\r\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}